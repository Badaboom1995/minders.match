const {Markup, Scenes} = require("telegraf");
const {makeKeyboard} = require("../helpers/keyboard");
const { WizardScene } = Scenes;
const {supabase} = require("../supabase");
const dayjs = require('dayjs');
const {createKeyboard} = require("../helpers/makeRegularKeyboard");
const {track} = require("@amplitude/analytics-node");

const doneMessage = `‚≠êÔ∏è –ì–æ—Ç–æ–≤–æ! –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –∑–∞–ø—Ä–æ—Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã. –°–∫–æ—Ä–æ –ø–æ–¥–±–µ—Ä–µ–º —Ç–µ–±–µ –ø–∞—Ä—É.

–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∏–∂–µ. –¢–∞–º –∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ, –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä—É –∏ —Ç–¥.`
const mainKeyboard = createKeyboard({keys: ['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üó£ –ó–∞–ø—Ä–æ—Å', "‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É", "üë• –ü–∞—Ä–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏"], rows:2})

const checkCorrectAnswer = (ctx, prefix, isText) => {
    if(!ctx.callbackQuery) return false;
    const {data} = ctx.callbackQuery;
    const [answer_prefix, answer] = data.split('_');
    if (answer_prefix === prefix) {
        ctx.wizard.state.editField = answer;
        return true;
    }
    return false;
}

const saveRequestToDB = async (ctx) => {
    const answer = ctx.callbackQuery?.data.split('_')[1]
    const firstDayOfWeek = dayjs().startOf('week');

    const { data: currRequest, error } = await supabase
        .from('Requests')
        .select('*')
        .gt('created_at', firstDayOfWeek)
        .single()

    await supabase
        .from('Users')
        .update({is_ready: true})
        .eq('telegram', ctx.from.username)

    const request = {
        format: ctx.session.format,
        profit_level: ctx.session.funOrProfit,
        location: answer,
    }
    if(!currRequest) {
        request.telegram = ctx.from.username;
        await supabase
            .from('Requests')
            .insert([request])
    } else {
        const { data, error } = await supabase
            .from('Requests')
            .update(request)
            .eq('id', currRequest.id)

        if(error) console.log('error', error)
    }

}

const requestScene = new WizardScene(
    'requestScene',
    async (ctx) => {
        track('request scene enter', {
            username: ctx.from.username,
        })
        await ctx.reply(
            `–ö–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ -- –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω –Ω–∞ –ë–∞–ª–∏?`,
            Markup.inlineKeyboard(
                makeKeyboard(
                    ['–û—Ñ–ª–∞–π–Ω', "–û–Ω–ª–∞–π–Ω"],
                    3, 'format'),
                {columns: 3}
            )
        );
        track('meeting format', {
            username: ctx.from.username,
        })
        return ctx.wizard.next();
    },
    async (ctx) => {
        if(!checkCorrectAnswer(ctx, 'format')) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
            return ctx.scene.enter('requestScene');
        }
        await ctx.answerCbQuery();
        const answer = ctx.callbackQuery?.data.split('_')[1]
        ctx.session.format = answer;
        await ctx.replyWithPhoto('https://ibb.co/CwzxZ3F');
        await ctx.reply(
            `–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –≤—Å—Ç—Ä–µ—á–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–≤–µ—Å—Ç–∏ –ø–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —É—Å–ª–æ–≤–Ω–æ –Ω–∞–∑–æ–≤—ë–º —ç—Ç–æ "–ø–æ–ª—å–∑–æ–π". –ê –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫—Ä—É–≥–æ–∑–æ—Ä–∞, –Ω–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è —á–µ–≥–æ-—Ç–æ –Ω–æ–≤–æ–≥–æ, –Ω–∞–∑–æ–≤—ë–º —ç—Ç–æ "—Ñ–∞–Ω". –ö–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ?
            
–í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ñ–∞–Ω–∞ –∏ –ø–æ–ª—å–∑—ã. –ß–µ–º –±–æ–ª—å—à–µ —Ü–∏—Ñ—Ä–∞ —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—å–∑—ã. –ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Å –≤—ã–±–æ—Ä–æ–º :)`,
            Markup.inlineKeyboard(
                makeKeyboard(
                    ['0%', "25%", "50%", "75%", "100%"],
                    6, 'funOrProfit'),
                {columns: 6}
            )
        );
        track('fun/use', {
            username: ctx.from.username,
        })
        return ctx.wizard.next();
    },
    async (ctx) => {
        if(!checkCorrectAnswer(ctx, 'funOrProfit')) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
            return ctx.wizard.selectStep(2);
        }
        await ctx.answerCbQuery();
        const answer = ctx.callbackQuery?.data.split('_')[1]
        ctx.session.funOrProfit = answer.replace("%", "");
        if(ctx.session.format === '–û–Ω–ª–∞–π–Ω') {
            await ctx.reply(doneMessage, mainKeyboard);
            await saveRequestToDB(ctx);

            return ctx.scene.leave()
        }
        track('location', {
            username: ctx.from.username,
        })
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –≤—Å—Ç—Ä–µ—á.',
            Markup.inlineKeyboard(
                makeKeyboard(
                    ['–ß–∞–Ω–≥—É (–°–µ–º–µ–Ω—å—è–∫)', "–ë—É–∫–∏—Ç", "–£–±—É–¥"],
                    2, 'location'),
                {columns: 3}
            )
        );
        return ctx.wizard.next();
    },
    async (ctx) => {
        // 1 Wait for text answer
        if(!checkCorrectAnswer(ctx, 'location')) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
            return ctx.wizard.selectStep(3);
        }
        await ctx.answerCbQuery();
        await saveRequestToDB(ctx);
        await ctx.reply(doneMessage, mainKeyboard);
        track('request done', {
            username: ctx.from.username,
        })
        return ctx.scene.leave()
    }
);

module.exports = {requestScene};

