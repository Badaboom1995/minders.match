const {Markup, Scenes} = require("telegraf");
const {makeKeyboard} = require("../helpers/keyboard");
const { WizardScene} = Scenes;
const {supabase} = require("../supabase");
const {getMissingData} = require("../helpers/getMissingData");
const {skillsDict, hobbiesDict} = require("../config");
const {uploadImage} = require("../helpers/uploadImage");
const {track} = require("@amplitude/analytics-node");

const checkCorrectAnswer = (ctx, prefix, isText) => {
    if(!ctx.callbackQuery) return false;
    const {data} = ctx.callbackQuery;
    const [answer_prefix, answer] = data.split('_');
    if (answer_prefix === prefix) {
        ctx.wizard.state.editField = answer;
        return true;
    }
    return false;
}

const dataDict = {
    name: '–ò–º—è',
    profile_photo_url: '–§–æ—Ç–æ',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ',
    requests: '–ó–∞–ø—Ä–æ—Å—ã',
    superpower: '–°—É–ø–µ—Ä—Å–∏–ª–∞',
    skills: '–ù–∞–≤—ã–∫–∏',
    hobbies: '–£–≤–ª–µ—á–µ–Ω–∏—è',
    groups: '–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å',
}

const profileNormalizeScene = new WizardScene(
    'profileNormalize',
    async (ctx) => {
        const answer = ctx.callbackQuery?.data.split('_')[1]
        const prefix = ctx.callbackQuery?.data.split('_')[0]
        if(prefix === 'done'){
            let data
            if(answer){
                if(ctx.session.currentField === 'skills') {
                    data = ctx.session.skills.map(skill => skillsDict.find(item => item.name === skill).id).join(',')
                }
                if(ctx.session.currentField === 'hobbies') {
                    data = ctx.session.hobbies.map(hobby => hobbiesDict.find(item => item.name === hobby).id).join(',')
                }
            }

            await supabase
                .from('Users')
                .update({ [ctx.session.currentField]: data })
                .eq('telegram', ctx.session.user?.telegram);

            await ctx.answerCbQuery();

            ctx.session.missingData.shift();
        }
        if(!ctx.session.missingData) {
            track('normalize scene entered', {
                username: ctx.from.username,
            })
            ctx.session.missingData = getMissingData(ctx.session.user).filter(field => dataDict.hasOwnProperty(field));
            if(!ctx.session.missingData.includes('hobbies')){ctx.session.missingData.push('hobbies')}
            if(!ctx.session.missingData.includes('skills')){ctx.session.missingData.push('skills')}
            ctx.session.skills = [];
            ctx.session.hobbies = [];
        }

        ctx.session.currentField = ctx.session.missingData[0];
        if(!ctx.callbackQuery) {
            await ctx.reply(`–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è:
- ${ctx.session.missingData.map(item => dataDict[item]).join("\n- ")}`);
        }
        switch (ctx.session.currentField) {
            case 'name':
                 await ctx.reply('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –£–∫–∞–∂–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é');
                break;
            case 'profile_photo_url':
                 await ctx.reply('–ü—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è. –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ');
                break;
            case 'description':
                 await ctx.reply('–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ. –ù–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.');
                break;
            case 'requests':
                 await ctx.reply('–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É? –ß—Ç–æ –æ–∂–∏–¥–∞–µ—à—å –æ—Ç –Ω–µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å?');
                break;
            case 'superpower':
                 await ctx.reply('–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å—É–ø–µ—Ä —Å–∏–ª–∞? –ö–∞–∫ —Ç—ã —Å—á–∏—Ç–∞–µ—à—å, –≤ —á–µ–º —Ç–µ–±–µ –Ω–µ—Ç —Ä–∞–≤–Ω—ã—Ö?');
                break;
            case 'skills':
                 if(answer && prefix === 'skills'){
                     track('skill added', {
                         username: ctx.from.username,
                         skill: answer,
                     })
                    await ctx.answerCbQuery();
                    ctx.session.skills.push(answer);
                    await ctx.reply(`‚úÖ –î–æ–±–∞–≤–∏–ª ${answer}`);
                 }
                 else {
                     const skills = skillsDict.map(item => item.name)
                     await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏. –ù–µ –±–æ–ª–µ–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', Markup.inlineKeyboard(makeKeyboard(skills, 2, 'skills'), {columns: 3}));
                     await ctx.reply('–ù–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å', Markup.inlineKeyboard(makeKeyboard(['üíæ –ì–æ—Ç–æ–≤–æ'], 3, 'done'), {columns: 3}));
                 }
                 if(ctx.session.skills.length >= 5) {
                     return ctx.wizard.next();
                 }
                 return ctx.wizard.selectStep(0)
                break;
            case 'hobbies':
                if(answer && prefix === 'hobbies'){
                    await ctx.answerCbQuery();
                    track('hobby added', {
                        username: ctx.from.username,
                        skill: answer,
                    })
                    ctx.session.hobbies.push(answer);
                    await ctx.reply(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${answer}`);
                }
                else {
                    const hobbies = hobbiesDict.map(item => item.name)
                    await ctx.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ —Ö–æ–±–±–∏. –ù–µ –±–æ–ª–µ–µ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.', Markup.inlineKeyboard(makeKeyboard(hobbies, 2, 'hobbies'), {columns: 3}));
                    await ctx.reply('–ù–∞–∂–º–∏ "–ì–æ—Ç–æ–≤–æ" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å', Markup.inlineKeyboard(makeKeyboard(['üíæ –ì–æ—Ç–æ–≤–æ'], 3, 'done'), {columns: 3}));
                }
                if(ctx.session.hobbies.length >= 5) {
                    return ctx.wizard.next();
                }
                return ctx.wizard.selectStep(0)
                break;
            case 'groups':
                 await ctx.reply('–ö –∫–∞–∫–∏–º –≥—Ä—É–ø–ø–∞–º —Å–µ–±—è –æ—Ç–Ω–æ—Å–∏—à—å?');
                break;
            default:
                await supabase
                    .from('Users')
                    .update({ is_updated: true })
                    .eq('telegram', ctx.session.user.telegram);

                track('profile is ready', {
                    username: ctx.from.username,
                })
                return ctx.scene.enter('requestScene');
        }
        return ctx.wizard.next();
    },

    async (ctx) => {
        const answer = ctx.callbackQuery?.data.split('_')[1]
        let data = ctx.message?.text
        if(answer){
            if(ctx.session.currentField === 'skills') {
                data = ctx.session.skills.map(skill => skillsDict.find(item => item.name === skill).id).join(',')
            }
            if(ctx.session.currentField === 'hobbies') {
                data = ctx.session.hobbies.map(hobby => hobbiesDict.find(item => item.name === hobby).id).join(',')
            }
        }
        if(ctx.session.currentField === 'profile_photo_url') {
            if(ctx.message.photo){
                const photoUrl = await ctx.telegram.getFileLink(ctx.message.photo[ctx.message.photo.length - 1].file_id);
                const cdnURL = await uploadImage(photoUrl, ctx);
                data = cdnURL
            } else {
                await ctx.reply('–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞');
                track('sent photo as text', {
                    username: ctx.from.username,
                })
                return ctx.scene.enter('profileNormalize');
            }
        }
        // console.log(photoUrl)
        // 2 save to db
        const { error } = await supabase
            .from('Users')
            .update({ [ctx.session.currentField]: data })
            .eq('telegram', ctx.session.user.telegram);

        if(error) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞');
            track('profile normalize save error', {
                username: ctx.from.username,
            })
            return ctx.scene.enter('profileNormalize');

        } else {

            await ctx.reply('‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª');
            track('profile normalize saved prop', {
                username: ctx.from.username,
            })
            ctx.session.missingData.shift();
            return ctx.scene.enter('profileNormalize');
        }
    },
);

module.exports = {profileNormalizeScene};